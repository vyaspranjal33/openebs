# test-volume-taints.yml
# Description: Checking the Volume taint-toleartion, replica count and storage pool policy.
# Author: Swarna
###############################################################################################
#Test Steps:
#1. Taint the node for pvc
#2. Check if the nodes are tainted
#3. Copy the test artifacts to k8s master.
#4. Deploy storage pool CRD yaml.
#5. Copy and replace key,value and storage pool and replica count value in volume policies yaml.
#6. Deploy volume policies.
#7. Download test-pvc file
#8. Create  namespace for PVC
#9. Change the stoarge class name in test-pvc yaml and deploy.
#10. Check the Deployed replica count is equal to replica count specified in the policy.
#11. Obtain the list of replicas and their nodes
#12. Check the replicas are scheduled on tainted nodes
#13. Get the PVC name and check the PVCs are present inside the correct storage pool path.
#14. Cleaning up the test artifacts
###############################################################################################


- hosts: localhost

  vars_files:
    - volume-taints-vars.yml

  tasks:

   - block:

       - include: pre-requisites.yml

       - name: Taint the nodes for the pvc
         shell: source ~/.profile; kubectl taint nodes {{ item }} {{ pvc_key }}={{ pvc_value }}:NoSchedule
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         with_items: "{{ node_names }}"

       - name: Check nodes are tainted
         shell: source ~/.profile; kubectl describe node {{ node_names[0] }} {{ node_names[1] }}  | grep NoSchedule
         args:
           executable: /bin/bash
         register: result
         until: "'NoSchedule' in result.stdout"
         delay: 30
         retries: 3
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Get the Number of nodes count
         shell: source ~/.profile; kubectl get nodes | grep 'Ready' | grep 'none' | wc -l
         args:
           executable: /bin/bash
         register: node_out
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Fetch the node count from stdout
         set_fact:
            node_count: " {{ node_out.stdout}}"

       - name: Check status of maya-apiserver
         include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
           ns: openebs
           lkey: name
           lvalue: maya-apiserver

       - name: Copy the storage-pool creation  yaml to kube master
         copy:
           src: "{{ storage_pool }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Deploy the storage-pool creation yaml
         shell: source ~/.profile; kubectl apply -f "{{ storage_pool }}"
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Copy the volume-policies yaml to kube master
         copy:
           src: "{{ volume_policy }}"
           dest: "{{ result_kube_home.stdout }}"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Replace the key and value in volume-policies yaml
         replace:
           path: "{{ result_kube_home.stdout }}/{{ volume_policy }}"
           regexp: '{{ item.0 }}'
           replace: '{{ item.1 }}'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         with_together:
           - "{{list}}"
           - "{{replace_list}}"

       - name: Replace stoarge pool path involume-policies yaml
         replace:
           path: "{{ result_kube_home.stdout }}/{{ volume_policy }}"
           regexp: 'value: ssd'
           replace: 'value: sp-mntdir'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"


       - name: Replace the replica count volume-policies yaml
         replace:
           path: "{{ result_kube_home.stdout }}/{{ volume_policy }}"
           regexp: 'value: "2"'
           replace: 'value: "{{ (node_count) |int-1 }}"'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"


       - name: Deploy the volume-policies yaml
         shell: source ~/.profile; kubectl apply -f "{{ volume_policy }}"
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"


       - name: Download test-pvc file
         get_url:
           url: https://raw.githubusercontent.com/openebs/openebs/master/e2e/ansible/playbooks/hyperconverged/test-k8s-storage-pool/test-pvc.yaml
           dest: "{{ result_kube_home.stdout }}"
           force: yes
         register: result
         until:  "'OK' in result.msg"
         delay: 5
         retries: 3
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Replace the storage class name in test-pvc yaml
         replace:
           path: test-pvc.yaml
           regexp: 'storageClassName: openebs-standard'
           replace: 'storageClassName: openebs-standard-0.6.0'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Create namespace for PVC
         include_tasks: "{{utils_path}}/namespace_task.yml"
         vars:
           status: create
           ns: "{{ namespace }}"


       - name: Deploy the test-pvc yaml
         shell: source ~/.profile; kubectl apply -f test-pvc.yaml -n "{{ namespace }}"
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Confirm volume container is running
         shell: source ~/.profile; kubectl get pods -n {{ namespace }} | grep pvc | grep {{item}} | grep Running | wc -l
         args:
           executable: /bin/bash
         register: result
         until: result.stdout|int >= 1
         delay: 60
         retries: 5
         with_items:
           - ctrl
           - rep
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Get storage ctrl pod name
         shell: source ~/.profile; kubectl get pods -n kube-system | grep ctrl | awk {'print $1'}
         args:
           executable: /bin/bash
         register: ctrl_name
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Set ctrl pod name to variable
         set_fact:
           ctrl_pod_name: "{{ ctrl_name.stdout.split()[0] }}"

       ###### Verifying the Volume-Monitor policy ######################################################################

       - name: Check the maya-exporter container is running
         shell: source ~/.profile; kubectl get pods {{ ctrl_pod_name  }} -n {{ namespace }} -o jsonpath='{.spec.containers[*].name}'
         args:
           executable: /bin/bash
         register: container_result
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         failed_when: "'maya-exporter' not in container_result.stdout"
         ignore_errors: true

       - name: Check all the containters are READY and Running in controller pod
         shell: source ~/.profile; kubectl get pods -n {{ namespace }} | grep ctrl  | awk {'print $2'}
         args:
           executable: /bin/bash
         register: container1_result
         until: "'2/2' in container1_result.stdout"
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         delay: 30
         retries: 5



       - name: Get the count of the running replicas
         shell: source ~/.profile; kubectl get pods -n {{ namespace }} | grep pvc | grep rep | grep Running | wc -l
         args:
           executable: /bin/bash
         register: rep_count
         delay: 30
         retries: 5
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         ignore_errors: true

         ############ Verifying the Replica count policy #############

       - name: Check the deployed replicas count ==  replicy count specified in the policy
         command: echo "Verfiying the replica count policy "
         when: (node_count)|int-1  == (rep_count)|int
         register: result
         ignore_errors: true
       - debug:
           msg: "The deployed replica count is equal to replica count specified in the policy"
         when: "result.rc == 0"


       - name: Obtain the list of replicas and their nodes
         shell: source ~/.profile; kubectl get pods -n {{ namespace }} -o wide | grep rep
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Set replica1 pod node name to variable
         set_fact:
           rep1_node: "{{ result.stdout.split()[6] }}"

       - name: Set replica2 pod node name to variable
         set_fact:
           rep2_node: "{{ result.stdout.split()[13] }}"

       ############## verifying the Taint and toleration policy ###############

       - name:  Verifying the replicas are deployed on tainted nodes
         command: echo " check replicas are running on the tainted nodes"
         when:  rep1_node  == node_names[0] or rep1_node == node_names[1] and rep2_node == node_names[0] or rep2_node == node_names[1]
         register: result
       - debug:
           msg: "Replicas are scheduled on tainted nodes"
         when: "result.rc == 0"

       - name: Get storage replica pod name
         shell: source ~/.profile; kubectl get pods -n {{ namespace }} | grep rep  | awk {'print $1'}
         args:
           executable: /bin/bash
         register: rep_name
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Set replica pod name to variable
         set_fact:
           rep_pod_name: "{{ rep_name.stdout.split('-rep-')[0] }}"

       ############## Verifying the Storage Pool policy #######################

       - name: 13c) find the pvc inside the /mnt/openebs
         stat:
          path: /mnt/openebs/{{ rep_pod_name }}
         register: stat_result
         become: true
         delegate_to: "{{groups['kubernetes-kubeminions'].0}}"
       - debug:
           msg: "File exists..."
         when: stat_result.stat.exists

       - name: Test playbook passed
         set_fact:
           flag: "Test Passed"

       - name: Set Status
         set_fact:
           status: "good"

     rescue:
       - name: Test playbook failed
         set_fact:
           flag: "Test Failed"

       - name: Set Status
         set_fact:
           status: "danger"

     always:

       - block:

           - include: cleanup.yml
             when: clean | bool

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - name: Terminate the log aggregator
             shell: source ~/.profile; killall stern
             args:
               executable: /bin/bash
             delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

           - include_tasks: "{{utils_path}}/namespace_task.yml"
             vars:
               status: delete
               ns: "{{ namespace }}"


           - name: Send slack notification
             slack:
               token: "{{ lookup('env','SLACK_TOKEN') }}"
               msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}'
               color: "{{status}}"
             when: slack_notify | bool and lookup('env','SLACK_TOKEN')























