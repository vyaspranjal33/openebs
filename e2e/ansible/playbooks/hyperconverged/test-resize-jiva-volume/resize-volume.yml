# Test name: Resize Jiva volume

#Description: Check if the OpenEBS Jiva volume's capacity can be expanded.

# STEPS INVOLVED:
#1) Deploy OpenEBS
#2) Create label for a node.
#3) Deploy percona with node selector applied.
#4) Obtain iSCSI target details.
#5) Unmount the file system
#6) Logout the iscsi target
#7) Get the id of the volume
#8) Modify the volume size
#9) Restart the replicas
#10) Check the file system consistency
#10) Expand the file system
#)11) Mount the file system
#12) Restart the application pod
#13) Write data on the resized portion of the file system.

- hosts: localhost

  vars_files:
    - resize-volume-vars.yml

  tasks:

    - block:

        - include: pre-requisites.yml

        - include_tasks: "{{utils_path}}/deploy_check.yml"
          vars:
             ns: openebs
             lkey: name
             lvalue: maya-apiserver             

        - name: Copy the percona definition yaml to k8s master
          copy:
            src: "{{ percona_def }}"
            dest: "{{ result_kube_home.stdout }}"
          delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

        - name: Getting the node name
          shell: kubectl get nodes -o wide  | awk {'print $1'} | awk 'FNR == 4{print}'
          args:
            executable: /bin/bash
          register: node_name
          delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

# Creating label "app=percona" for a node, so that node selector tag can be used in next task.

        - name: Creating label for the node
          shell: kubectl label nodes {{node_name.stdout}} app=percona
          args:
            executable: /bin/bash
          register: label
          delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
          until: '"labeled" in label.stdout'
          delay: 10
          retries: 3

        - name: Creating test specific namespace
          include_tasks: "{{utils_path}}/namespace_task.yml"
          vars:
            status: create
            ns: "{{ namespace }}"


        - name: Deploying application
          shell: source ~/.profile; kubectl apply -f "{{ percona_def }}" -n "{{ namespace }}"
          args:
            executable: /bin/bash
          register: percona_status
          delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
          until: "'created' in percona_status.stdout"
          delay: 30
          retries: 5

        - name: Checking if the application is deployed successfully
          shell: kubectl get pods -n "{{ namespace }}" --show-labels | grep "{{ app_label }}"
          args:
            executable: /bin/bash
          register: app_status
          delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
          until: "'Running' in app_status.stdout"
          delay: 60
          retries: 15

        - name: Getting PV name from the pvc
          shell: kubectl get pvc {{ claim_name }} -n "{{ namespace }}" -o custom-columns=:spec.volumeName --no-headers
          args:
            executable: /bin/bash
          register: pv
          delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

        - name: Getting the controller service IP address
          shell: kubectl get svc -n "{{ namespace }}" | grep "{{ pv.stdout }}" | grep ctrl | awk {'print $3'}
          args:
            executable: /bin/bash
          register: target_IP
          delegate_to: "{{ groups['kubernetes-kubemasters'].0}}"

        - name: Getting the device name
          shell: fdisk -l | grep "5 G" | awk {'print $2'} | sed 's/.$//'
          args:
            executable: /bin/bash
          become: true
          register: device_name
          delegate_to: "{{groups['kubernetes-kubeminions'].1}}"

        - name: Getting the mounted directory
          shell: mount | grep "{{ device_name.stdout }}" | awk {'print $3'} | awk 'FNR == {{item}} {print}'
          args:
            executable: /bin/bash
          register: mount_path
          with_items:
            - 1
            - 2
          delegate_to: "{{groups['kubernetes-kubeminions'].1}}"

        - name: Unmount the file system
          mount:
            path: "{{ item }}"
            state: unmounted
          become: true
          with_items:
            - "{{ mount_path.results[0].stdout }}"
            - "{{mount_path.results[1].stdout }}"
          delegate_to: "{{groups['kubernetes-kubeminions'].1}}"

        - name: Finding the iSCSI target name
          shell: iscsiadm -m session | grep "{{ target_IP.stdout}}"| awk {'print $4'}
          args:
            executable: /bin/bash
          become: true
          register: iqn
          delegate_to: "{{groups['kubernetes-kubeminions'].1}}"

        - name: Logging out the iSCSI target
          open_iscsi:
            login: no
            target: "{{ iqn.stdout }}"
            show_nodes: yes
          become: true
          delegate_to: "{{groups['kubernetes-kubeminions'].1}}"

        - name: Getting the response of volume api
          shell: curl http://"{{target_IP.stdout}}":9501/v1/volumes
          args:
            executable: /bin/bash
          register: resp
          delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
          changed_when: true

        - set_fact:
            vol_id: "{{ (resp.stdout | from_json).data[0].id  }}"

        - name: Modify the capacity of volume
          uri:
            url: http://{{target_IP.stdout}}:9501/v1/volumes/{{vol_id}}?action=resize
            method: POST
            return_content: yes
            body: {"name":"{{pv.stdout}}","size":"6 G"}
            body_format: json
            headers:
              Content-Type: "application/json"
          register: modify
          delegate_to: "{{ groups['kubernetes-kubemasters'].0}}"

        - name: Getting the replica pod names
          shell:  kubectl get pods --all-namespaces --show-labels | grep openebs.io/replica=jiva-replica | awk {'print $2'} | awk 'FNR == {{ item }} {print}'
          args:
            executable: /bin/bash
          register: pods
          with_items:
            - 1
            - 2
            - 3
          delegate_to: "{{ groups['kubernetes-kubemasters'].0}}"

        - name: Deleting all replica pods at once
          shell: sleep 30; kubectl delete pod "{{ pods.results[0].stdout }}" "{{pods.results[1].stdout}}" "{{pods.results[2].stdout}}" -n "{{ namespace }}"
          args:
            executable: /bin/bash
          register: delete_pod
          delegate_to: "{{ groups['kubernetes-kubemasters'].0}}"
          until: "'deleted' in delete_pod.stdout"
          delay: 20
          retries: 5

        - name: Checking if the replica pods are created again.
          shell: kubectl get pods -n "{{ namespace }}" --show-labels | grep "{{ pv.stdout }}" | grep "{{ replica_label }}" | grep Running | wc -l
          args:
            executable: /bin/bash
          register: result
          delegate_to: "{{ groups['kubernetes-kubemasters'].0}}"
          until: result.stdout|int == 3
          delay: 30
          retries: 10

        - name: Login to iSCSI target
          open_iscsi:
            show_nodes: yes
            login: yes
            target: "{{ iqn.stdout }}"
          become: yes
          delegate_to: "{{groups['kubernetes-kubeminions'].1}}"

        - name: Finding the new device name
          shell: iscsiadm -m session -P3 | egrep 'iqn|disk' | grep disk | awk {'print $4'}
         #shell: fdisk -l | grep "6 G" | awk {'print $2'} | sed 's/.$//'
          args:
            executable: /bin/bash
          become: true
          register: new_device
          delegate_to: "{{groups['kubernetes-kubeminions'].1}}"

        - name: Running fsck on the new device
          shell: e2fsck -f /dev/{{ new_device.stdout }} -y
          args:
            executable: /bin/bash
          become: true
          register: fs_check
          delegate_to: "{{groups['kubernetes-kubeminions'].1}}"
          until: '"MODIFIED" or "clean" in fs_check.stdout'
          delay: 20
          retries: 5
          ignore_errors: yes

        - name: Resizing the file system
          shell: resize2fs /dev/{{ new_device.stdout }}
          args:
            executable: /bin/bash
          become: true
          register: resize
          delegate_to: "{{groups['kubernetes-kubeminions'].1}}"
          until: "'Resizing the filesystem on' in resize.stdout"
          delay: 20
          retries: 10

        - name: Mount FS
          shell: mount /dev/{{ new_device.stdout }} "{{ item }}"
          args:
            executable: /bin/bash
          become: true
          with_items:
            - "{{ mount_path.results[0].stdout }}"
            - "{{mount_path.results[1].stdout }}"
          delegate_to: "{{groups['kubernetes-kubeminions'].1}}"

        - name: Wait
          wait_for: timeout=120

        - name: Getting application pod
          shell: kubectl get pods --all-namespaces --show-labels | grep {{ app_label }} | awk {'print $2'}
          args:
            executable: /bin/bash
          register: app
          delegate_to: "{{ groups['kubernetes-kubemasters'].0}}"

        - name: Deleting the application pod
          shell: kubectl delete pod {{ app.stdout }} -n "{{ namespace }}" --grace-period=0 --force
          args:
            executable: /bin/bash
          register: delete_app
          delegate_to: "{{ groups['kubernetes-kubemasters'].0}}"
          until: "'deleted' in delete_app.stdout"
          delay: 10
          retries: 5

        - name: Check if the application pod is running
          shell: kubectl get pods -n "{{ namespace }}" --show-labels | grep "{{app_label}}"
          args:
            executable: /bin/bash
          register: app_out
          delegate_to: "{{ groups['kubernetes-kubemasters'].0}}"
          until: "'Running' in app_out.stdout"
          delay: 20
          retries: 10

        - name: Writing data into the volume using dd
          shell: dd if=/dev/urandom of="{{mount_path.results[1].stdout}}/f1" bs=4k seek=1250000 count=20000
          args:
            executable: /bin/bash
          become: true
          delegate_to: "{{groups['kubernetes-kubeminions'].1}}"

        - name: Setting the Pass flag
          set_fact:
            flag: "TEST PASSED"

        - name: Set Status
          set_fact:
            status: "good"

        - name: Wait
          wait_for: timeout=200

      rescue:
        - name: Setting the fail flag
          set_fact:
            flag: "TEST FAILED"

        - name: Set Status
          set_fact:
            status: "danger"

      always:

        - block:

            - name: Remove the node label
              shell: kubectl label node "{{node_name.stdout}}" app-
              args:
                executable: /bin/bash
              delegate_to: "{{ groups['kubernetes-kubemasters'].0}}"

            - include: resize-cleanup.yml
              when: clean | bool

            - name: Setting Cleanup flag to passed
              set_fact:
                cflag: "CLEANUP PASSED"

          rescue:

            - name: Setting cleanup flag to failed
              set_fact:
                cflag: "CLEANUP FAILED"

          always:

            - include_tasks: "{{utils_path}}/stern_task.yml"
              vars:
                status: stop

            - include_tasks: "{{utils_path}}/namespace_task.yml"
              vars:
                status: delete
                ns: "{{ namespace }}"

            - name: Send slack notification
              slack:
                token: "{{ lookup('env','SLACK_TOKEN') }}"
                msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }}, {{ cflag }}'
                color: "{{status}}"
              when: slack_notify | bool and lookup('env','SLACK_TOKEN')

