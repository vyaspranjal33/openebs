# k8s-crunchy-pg.yml
# Description: Deploy postgres application

###############################################################################################
#Test Steps:
#1. Install the packages and dependencies.
#2. Check whether the OpenEBS components are deployed.
#3. Download the test artifacts to k8s master.
#4. Modify the size and obtain the number of statefulset
#5. Deploy the postgres application by executing the shell script.
#6. Check if the application pod is up and running
#7. Check if the postgres master and replica services are running.
#8. Perform cleanup of test artifacts.
###############################################################################################

- hosts: localhost

  vars_files:
    - k8s-crunchy-pg-vars.yml

  tasks:

   - block:

       - include: k8s-crunchy-pg-prerequisites.yml

       - name: 1) Check whether maya-apiserver pod is deployed
         include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
           ns: "{{ operator_ns }}"
           lvalue: maya-apiserver
           lkey: name
 
       - name: 2) Replace 'tree/master' with 'trunk' in the crunchy-postgres link
         debug:
           msg={{ crunchy_pg_git_dir | regex_replace('tree/master', 'trunk')}}
         register: git_svn_link

       - name: 3) Set the modified link as a fact
         set_fact:
           crunchy_dir: "{{ git_svn_link.msg }}"

       - name: 3a) Download the crunch-postgres folder kubemaster home
         subversion:
           repo: "{{ crunchy_dir }}"
           export: yes
           dest: "{{ result_kube_home.stdout }}/crunchy-postgres"
           force: yes
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 4) Replace volume size in set.json
         lineinfile:
           path: "{{ result_kube_home.stdout }}/crunchy-postgres/set.json"
           regexp: "\"storage\":"
           line: "              \"storage\": \"{{postgres_vol_size}}\""
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Replace storage-class to use cstor storage engine
         replace:
           path: "{{ result_kube_home.stdout }}/crunchy-postgres/set.json"
           regexp: 'openebs-standard'
           replace: '{{ cstor_sc }}'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         when:  storage_engine  == 'cStor'

       - name:  Replace storage-class to use jiva storage engine
         replace:
           path: "{{ result_kube_home.stdout }}/crunchy-postgres/set.json"
           regexp: 'openebs-standard'
           replace: '{{ jiva_sc }}'
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"
         when:  storage_engine  == 'jiva'

       - name: 4a) Get the number of statefulset details from set.json
         command: cat {{ result_kube_home.stdout }}/crunchy-postgres/set.json
         register: jsonfile
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 4b) Register the app label
         set_fact:
           label: "{{(jsonfile.stdout | from_json).spec.template.metadata.labels.app}}"

       - name: 4c) Register the replica variable
         set_fact:
           replicas: "{{(jsonfile.stdout | from_json).spec.replicas}}"

       - name: 5) Comment the cleanup step in the run.sh with
         lineinfile:
           path: "{{ result_kube_home.stdout }}/crunchy-postgres/run.sh"
           regexp: 'cleanup.sh'
           line: '#$DIR/cleanup.sh'
           backup: yes
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: 6) Run the shell script to setup postgres cluster
         shell: source ~/.profile; ./run.sh
         args:
           chdir: "{{ result_kube_home.stdout }}/crunchy-postgres"
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
           ns: default
           lkey: app
           lvalue: pgset


       - name: 8) Verify that the postgres master and replica are available as cluster services
         shell: source ~/.profile; kubectl get svc
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result_service
         failed_when: "'pgset-master' and 'pgset-replica' not in result_service.stdout"

       - name: Setting pass flag
         set_fact:
           flag: "Test Passed"
           status: "good"
           status_id: 1

     rescue:
       - name: Setting fail flag
         set_fact:
           flag: "Test Failed"
           status: "danger"
           status_id: 5

     always:
       - block:

           - include: k8s-crunchy-pg-cleanup.yml

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - include_tasks: "{{utils_path}}/stern_task.yml"
             vars:
               status: stop

           - name: Set Test Name as Fact
             set_fact:
               testname: "{{ test_name }}"
