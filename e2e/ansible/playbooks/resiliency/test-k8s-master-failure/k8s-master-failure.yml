#t-node-failure/test-node-failure.ymlest-k8s-master-failure.yml
# Description: Deploy Jenkins application using OpenEBS volume.
# Created jobs and builds inside mounted path and role upgrade pods.
# Bring down the master nodes and wait for some time.

###############################################################################################
#Test Steps:

#1.Check whether the OpenEBS components are deployed.
#2.Deployed jenkins application pod with any version .
#3.Download the test artifacts to k8s master.(jenkins-cli.war , change_onfig.sh, config.xml file for job creation).
#4.Run the Script file in order to get required changes inside application pod and restart the pod for save change.
#5.Created sample job and build it.
#6.Bring down the master node and wait for some time.
#7.Perform build operation with the existing created job.
#8.Check if the data is persisting or not by comparing the build first result to build second result.
#9 (Way to Check for data persitency inside application pod.)

###############################################################################################

- hosts: localhost

  vars_files:
    - k8s-master-failure-vars.yml

  tasks:

   - block:

     - include: k8s-master-prereq.yml

     - name: 1)  Check whether maya-apiserver is deployed
       include_tasks: "{{utils_path}}/deploy_check.yml"
       vars:
          ns: "{{ operator_ns }}"
          lkey: name
          lvalue: maya-apiserver

     - name: 2) Copy  YAML for jenkins to the master.
       include_tasks: "{{utils_path}}/copy_task.yml"
       vars:
         destination_node: "{{groups['kubernetes-kubemasters'].0}}"
         files_to_copy: "{{ pod_yaml_alias }}"

     - name: 2a)  Get the number of nodes in the cluster
       shell: source ~/.profile; kubectl get nodes | grep '<none>' | wc -l
       args:
         executable: /bin/bash
       register: node_out
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

     - name: Fetch the node count from stdout
       set_fact:
            node_count: " {{ node_out.stdout}}"

     - name: 2b) Create namespace for deployment.
       include_tasks: "{{utils_path}}/namespace_task.yml"
       vars:
         status: create
         ns: "{{ namespace }}"

     - name: 3) Deploy jenkins pod
       include_tasks: "{{utils_path}}/deploy_task.yml"
       vars:
          app_yml: "{{ pod_yaml_alias }}"
          ns: "{{ namespace }}"

     - name: 3a) Confirm jenkins pod status.
       include_tasks: "{{utils_path}}/deploy_check.yml"
       vars:
          ns: "{{ namespace }}"
          lkey: app
          lvalue: jenkins-app

     - name: 3b) Verify that the jenkins cluster service is created and running.
       shell: source ~/.profile; kubectl get svc -n {{namespace}}
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: result_service
       failed_when: "'jenkins-svc' not in result_service.stdout"

     - name: 3c) Get the name of the jenkins pod.
       shell: source ~/.profile; kubectl get pods -n {{namespace}} | grep jenkins | awk {'print $1'}
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: jenkins_pod_name

     - name: 4) Download Jenkins-cli.jar file inside /var/jenkins_home of pod.
       shell: >
          source ~/.profile; kubectl exec {{ jenkins_pod_name.stdout }} -n {{ namespace }}
          -- wget -P /var/jenkins_home http://localhost:8080/jnlpJars/jenkins-cli.jar
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: result
       retries: 2
       delay: 30
       until: result.rc == 0

     - name: 4a)  Copy job configuration files to master.
       include_tasks: "{{utils_path}}/copy_task.yml"
       vars:
         destination_node: "{{groups['kubernetes-kubemasters'].0}}"
         files_to_copy: "{{ job_config_files }}"

     - name: 4b) Copy job configuration files to jenkins-pod from master.
       shell: >
         source ~/.profile; kubectl cp {{result_kube_home.stdout}}/{{item}}
         {{namespace}}/{{ jenkins_pod_name.stdout }}:/var/jenkins_home/
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       with_items: "{{ job_config_files }}"

     - name: 5) Run the config_change.sh file for required changes inside pod.
       shell: >
          source ~/.profile; kubectl exec {{  jenkins_pod_name.stdout }} -n {{ namespace }}
          -- bash -c "sh /var/jenkins_home/config_change.sh"
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

     - name: Retrieve Password of jenkins running pods.
       shell: >
          source ~/.profile; kubectl exec  {{ jenkins_pod_name.stdout }} -n {{ namespace }}
          -- bash -c "cat /var/jenkins_home/secrets/initialAdminPassword"
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: jenkins_password

     - name: 5a) Restart the jenkins pod for running jenkins actions.
       shell: >
          source ~/.profile; kubectl exec {{ jenkins_pod_name.stdout }} -n {{ namespace }}
          -- java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8080 restart
          --username admin --password {{ jenkins_password.stdout }}
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

     - name: wait for 60 seconds.
       wait_for:
          timeout: 60

     - name: 6)  Create and Build one sample job (Hello World)  inside pod.
       shell: >
         source ~/.profile; kubectl exec {{ jenkins_pod_name.stdout }} -n {{ namespace }}
         -- bash -c "java -jar /var/jenkins_home/jenkins-cli.jar -s
         http://localhost:8080 create-job sample < /var/jenkins_home/template.xml";
         source ~/.profile; kubectl exec {{ jenkins_pod_name.stdout }} -n {{ namespace  }}
         -- bash -c "java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8080 build sample"
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

     - name: 6a)  Running a build job.
       shell: >
          source ~/.profile; kubectl exec {{ jenkins_pod_name.stdout }} -n {{ namespace }}
          -- bash -c "java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8080 console sample"
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: First_Build
        
     - name: Bring down the kubemaster.
       include: vagrant-up-down.yml
       vars:
         status: down

     - name: wait for 120 seconds.
       wait_for:
          timeout: 120

     - name: 7) Checking the status of kubemaster after kubemaseter halt.
       shell: vagrant status kubemaster-01 | grep kubemaster-01 |  awk '{ $1="";print}' | cut -d '(' -f1
       args:
         chdir: "{{vagrant_path}}"
         executable: /bin/bash
       register: VDown
       until: "'poweroff'  in VDown.stdout"

     - name: Bring up the kubemaster.
       include: vagrant-up-down.yml
       vars:
         status: up

     - name: wait for 120 seconds.
       wait_for:
          timeout: 120

     - name: 7a) Checking the status of kubemaster.
       shell: vagrant status kubemaster-01 | grep kubemaster-01 |  awk '{ $1="";print}' | cut -d '(' -f1
       args:
         chdir: "{{vagrant_path}}"
         executable: /bin/bash
       register: Vup
       until: "' running '  in Vup.stdout"

     - name: Get jenkins  PV name
       shell: source ~/.profile; kubectl get pv -n {{ namespace }}| grep {{namespace}}/jenkins-claim | awk '{print $1}'
       args:
         executable: /bin/bash
       register: pv_name
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

     - name: Check the number of  available replicas in deployment
       shell: source ~/.profile; kubectl get deploy -n {{ namespace }} | grep "{{ pv_name.stdout }}" | grep rep | awk '{print $2}'
       args:
         executable: /bin/bash
       register: available_pods
       until: "'3' in available_pods.stdout"
       delay: 30
       retries: 5
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       ignore_errors: true

     - name: Confirm pod status is running after kubemaster up.
       include_tasks: "{{utils_path}}/deploy_check.yml"
       vars:
          ns: "{{ namespace }}"
          lkey: app
          lvalue: jenkins-app

     - name: 8a)  Check if the replica is rebuilt using mayactl commands
       include_tasks: "{{utils_path}}/access-mode-check.yml"
       vars:
         ns: "{{ namespace }}"

     - name: 9)  Run  the Build command script file inside jenkins pod.
       shell:  >
          source ~/.profile; kubectl exec {{  jenkins_pod_name.stdout }} -n {{ namespace }}
          -- bash -c "sh /var/jenkins_home/Build_config.sh"
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

     - name: 9a)  Running a build job and building the job.
       shell: >
          source ~/.profile; kubectl exec {{ jenkins_pod_name.stdout }} -n {{ namespace }}
          -- bash -c "java -jar /var/jenkins_home/jenkins-cli.jar -s http://localhost:8080 console Test"
       args:
         executable: /bin/bash
       delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
       register: Second_Build

     - name: Check for result build from previous job config file.
       set_fact:
         flag: "Test Passed"
       when: "'Hello World!' in Second_Build.stdout"

     always:
       - block:

           - include: k8s-master-cleanup.yml

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup Failed"

         always:

           - include_tasks: "{{utils_path}}/stern_task.yml"
             vars:
               status: stop

           - include_tasks: "{{utils_path}}/namespace_task.yml"
             vars:
               status: delete
               ns: "{{ namespace }}"

           - name: Send slack notification
             slack:
               token: "{{ lookup('env','SLACK_TOKEN') }}"
               msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }},{{ cflag }}'
             when: slack_notify | bool and lookup('env','SLACK_TOKEN')
     when: is_vagrant_vm == true 



