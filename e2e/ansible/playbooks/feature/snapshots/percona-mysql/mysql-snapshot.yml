# mysql-snapshot-prerequisites.yml
# Author: Vibhor Kumar
# Description:

#########################################################################################################

# Test steps:

#1 Included namespace for the pods.
#2 Setting up cleanup fail/pass for test artifacts.
#3 Perform linter fixes for current file and all included files.

##########################################################################################################

- hosts: localhost

  vars_files:
    - mysql-snapshot-vars.yml

  tasks:
   - block:

       - include: mysql-snapshot-prerequisites.yml

       - include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ operator_ns }}"
            lkey: name
            lvalue: maya-apiserver

       - name: Store maya-apiserver pod name in variable
         set_fact:
           maya_pod: "{{ result.stdout_lines[1].split()[0] }}"

       - name: Create namespace
         include_tasks: "{{utils_path}}/namespace_task.yml"
         vars:
           status: create
           ns: "{{ namespace }}"

       - include_tasks: "{{utils_path}}/copy_task.yml"
         vars:
           files_to_copy: "{{ volume_def }}"
           destination_node: "{{ groups['kubernetes-kubemasters'].0 }}"

       - include_tasks: "{{utils_path}}/deploy_task.yml"
         vars:
           app_yml: "{{ volume_def }}"
           ns: "{{ namespace }}"

       - include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ namespace }}"
            lkey: name
            lvalue: percona

       - name: Get openebs storage ctrl pod name
         shell: source ~/.profile; kubectl get pods -n {{ namespace }} | grep ctrl
         args:
           executable: /bin/bash
         register: ctrl_name
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Store volume name to variable
         set_fact:
           vol_name: "{{ ctrl_name.stdout.split()[0].split('-ctrl-')[0] }}"

       - name: Get percona pod details
         shell: >
           source ~/.profile;
           kubectl get pods -n {{ namespace }} -l name=percona -o wide
           --no-headers
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Set percona pod variables to facts
         set_fact:
           pod_name: "{{ result.stdout.split()[0] }}"
           pod_ip: "{{ result.stdout.split()[5] }}"

       - name: Write a test database into percona mysql
         shell: |
           sleep 120
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "create database tdb;"
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "create table ttbl (Data VARCHAR(20));" tdb
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "insert into ttbl (Data) VALUES ('tdata');" tdb
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "flush tables with read lock;"
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "result.rc != 0"

       - name: Perform fs sync on percona pod before taking snap
         shell: >
           source ~/.profile;
           kubectl exec {{pod_name}} -n {{namespace}} -- bash -c "sync;sync;sync"
         args:
           executable: /bin/bash
         register: result_snap
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"

       - name: Create openebs volume snapshot via mayactl
         shell: >
           source ~/.profile;
           kubectl exec {{maya_pod}} -n openebs -c maya-apiserver
           -- mayactl snapshot create --volname {{vol_name}} -n {{ namespace }}
           --snapname {{snap_name}}
         args:
           executable: /bin/bash
         register: result_snap
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: "'Created' not in result_snap.stdout"


       - name: Confirm successful snapshot creation
         shell: >
           source ~/.profile;
           kubectl exec {{maya_pod}} -n openebs -c maya-apiserver
           -- mayactl snapshot list --volname {{vol_name}} -n {{namespace}}
         args:
           executable: /bin/bash
         register: result_snap_list
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: "snap_name not in result_snap_list.stdout"

       - name: Make changes to the mysql db server
         shell: |
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "unlock tables;"
           mysql -uroot -pk8sDem0 -h {{pod_ip}} -e "drop database tdb;"
           sleep 5
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "result.rc != 0"

       - name: Revert volume snapshot
         shell: >
           source ~/.profile;
           kubectl exec {{maya_pod}} -n openebs -c maya-apiserver
           -- mayactl snapshot revert --volname {{vol_name}} -n {{namespace}}
           --snapname {{snap_name}}
         args:
           executable: /bin/bash
         register: result_snap
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: "'Reverting to snapshot' not in result_snap.stdout"

       - name: Delete percona pod to force vol remount on reschedule
         shell: >
           source ~/.profile; kubectl delete pod {{pod_name}} -n {{ namespace }}
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         failed_when: "pod_name and 'deleted' not in result.stdout"

       - include_tasks: "{{utils_path}}/deploy_check.yml"
         vars:
            ns: "{{ namespace }}"
            lkey: name
            lvalue: percona

       - name: Get percona pod details after restart
         shell: >
           source ~/.profile;
           kubectl get pods -n {{ namespace }} -l name=percona -o wide
           --no-headers
         args:
           executable: /bin/bash
         register: result
         delegate_to: "{{ groups['kubernetes-kubemasters'].0 }}"

       - name: Store new percona pod IP in variable
         set_fact:
           pod_ip: "{{ result.stdout.split()[5] }}"

       - name: Verify successful snapshot restore by db query
         shell: >
           mysql -uroot -pk8sDem0 -h {{pod_ip}}
           -e "select * from ttbl;" tdb
         args:
           executable: /bin/bash
         delegate_to: "{{groups['kubernetes-kubemasters'].0}}"
         register: result
         failed_when: "'tdata' not in result.stdout"

       - name: Test Passed
         set_fact:
           flag: "Test Passed"

       - name: Set Status
         set_fact:
           status: "good"

     rescue:
       - name: Test Failed
         set_fact:
           flag: "Test Failed"


       - name: Set Status
         set_fact:
           status: "danger"

     always:
       - block:

           - include: mysql-snapshot-cleanup.yml

           - name: Test Cleanup Passed
             set_fact:
               cflag: "Cleanup_Passed"

         rescue:
           - name: Test Cleanup Failed
             set_fact:
               cflag: "Cleanup_Failed"

         always:

           - include_tasks: "{{utils_path}}/stern_task.yml"
             vars:
               status: stop

           - include_tasks: "{{utils_path}}/namespace_task.yml"
             vars:
               status: delete
               ns: "{{ namespace }}"

           
           - name: Send slack notification
             slack:
               token: "{{ lookup('env','SLACK_TOKEN') }}"
               msg: '{{ ansible_date_time.time }} TEST: {{test_name}}, RESULT: {{ flag }},{{cflag}}'
               color: "{{status}}"
             when: slack_notify | bool and lookup('env','SLACK_TOKEN')

